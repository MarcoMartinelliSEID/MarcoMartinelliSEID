using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using System.Runtime;

namespace TIAgenerator.Class
{
    //Methods for the generation of Networks to be merge in the main .XML file for the standard PLC part
    //Each Networks is generated by fetching data from the Json objects
    internal class SafetyXmlGen
    {
        public static void FC_FDIn_Network(ConfigSettings settings, int ID, ref string xml, DigitalSignal signal)
        {
            XmlDocument doc = new XmlDocument(); //PARTS
            XmlDocument doc2 = new XmlDocument(); //WIRES
            string header = "      <SW.Blocks.CompileUnit ID=\"" + ID.ToString() + "\" CompositionName=\"CompileUnits\">\r\n        <AttributeList>\r\n          <NetworkSource><FlgNet xmlns=\"http://www.siemens.com/automation/Openness/SW/NetworkSource/FlgNet/v4\">\r";
            string str = header;

            //ALARM OR TRIP NETWORK
            if (signal.isAlarm == "true" || signal.isTrip == "true")
            {
                XmlElement parts = doc.CreateElement("Parts"); //PARTS
                doc.AppendChild(parts);
                XmlElement access1 = doc.CreateElement("Access");
                access1.SetAttribute("Scope", "GlobalVariable");
                access1.SetAttribute("UId", "21");
                parts.AppendChild(access1);
                XmlElement symbol1 = doc.CreateElement("Symbol");
                access1.AppendChild(symbol1);
                XmlElement component1 = doc.CreateElement("Component");
                component1.SetAttribute("Name", signal.tag + "_FLD");
                symbol1.AppendChild(component1);
                XmlElement access2 = doc.CreateElement("Access");
                access2.SetAttribute("Scope", "GlobalVariable");
                access2.SetAttribute("UId", "22");
                parts.AppendChild(access2);
                XmlElement symbol2 = doc.CreateElement("Symbol");
                access2.AppendChild(symbol2);
                XmlElement component2 = doc.CreateElement("Component");
                component2.SetAttribute("Name", "FALM");
                symbol2.AppendChild(component2);
                XmlElement component3 = doc.CreateElement("Component");
                component3.SetAttribute("Name", signal.tag);
                symbol2.AppendChild(component3);
                XmlElement access3 = doc.CreateElement("Access");
                access3.SetAttribute("Scope", "GlobalVariable");
                access3.SetAttribute("UId", "23");
                parts.AppendChild(access3);
                XmlElement symbol3 = doc.CreateElement("Symbol");
                access3.AppendChild(symbol3);
                XmlElement component4 = doc.CreateElement("Component");
                component4.SetAttribute("Name", settings.tagReset);
                symbol3.AppendChild(component4);
                XmlElement access4 = doc.CreateElement("Access");
                access4.SetAttribute("Scope", "GlobalVariable");
                access4.SetAttribute("UId", "24");
                parts.AppendChild(access4);
                XmlElement symbol4 = doc.CreateElement("Symbol");
                access4.AppendChild(symbol4);
                XmlElement component5 = doc.CreateElement("Component");
                component5.SetAttribute("Name", signal.tag + "_FLD");
                symbol4.AppendChild(component5);
                XmlElement access5 = doc.CreateElement("Access");
                access5.SetAttribute("Scope", "GlobalVariable");
                access5.SetAttribute("UId", "25");
                parts.AppendChild(access5);
                XmlElement symbol5 = doc.CreateElement("Symbol");
                access5.AppendChild(symbol5);
                XmlElement component6 = doc.CreateElement("Component");
                component6.SetAttribute("Name", "FALM");
                symbol5.AppendChild(component6);
                XmlElement component7 = doc.CreateElement("Component");
                component7.SetAttribute("Name", signal.tag);
                symbol5.AppendChild(component7);
                XmlElement part1 = doc.CreateElement("Part");
                part1.SetAttribute("Name", "Contact");
                part1.SetAttribute("UId", "26");
                parts.AppendChild(part1);
                XmlElement negated = doc.CreateElement("Negated");
                negated.SetAttribute("Name", "operand");
                part1.AppendChild(negated);
                XmlElement part2 = doc.CreateElement("Part");
                part2.SetAttribute("Name", "SCoil");
                part2.SetAttribute("UId", "27");
                parts.AppendChild(part2);
                XmlElement part3 = doc.CreateElement("Part");
                part3.SetAttribute("Name", "Contact");
                part3.SetAttribute("UId", "28");
                parts.AppendChild(part3);
                XmlElement part4 = doc.CreateElement("Part");
                part4.SetAttribute("Name", "Contact");
                part4.SetAttribute("UId", "29");
                parts.AppendChild(part4);
                XmlElement part5 = doc.CreateElement("Part");
                part5.SetAttribute("Name", "RCoil");
                part5.SetAttribute("UId", "30");
                parts.AppendChild(part5);
                str += "\n" + doc.OuterXml;

                XmlElement wires = doc2.CreateElement("Wires"); //WIRES
                doc2.AppendChild(wires);
                XmlElement wire1 = doc2.CreateElement("Wire");
                wire1.SetAttribute("UId", "31");
                wires.AppendChild(wire1);
                XmlElement powerrail = doc2.CreateElement("Powerrail");
                wire1.AppendChild(powerrail);
                XmlElement nameCon1 = doc2.CreateElement("NameCon");
                nameCon1.SetAttribute("UId", "26");
                nameCon1.SetAttribute("Name", "in");
                wire1.AppendChild(nameCon1);
                XmlElement nameCon2 = doc2.CreateElement("NameCon");
                nameCon2.SetAttribute("UId", "28");
                nameCon2.SetAttribute("Name", "in");
                wire1.AppendChild(nameCon2);
                XmlElement wire2 = doc2.CreateElement("Wire");
                wire2.SetAttribute("UId", "32");
                wires.AppendChild(wire2);
                XmlElement identCon = doc2.CreateElement("IdentCon");
                identCon.SetAttribute("UId", "21");
                wire2.AppendChild(identCon);
                XmlElement nameCon3 = doc2.CreateElement("NameCon");
                nameCon3.SetAttribute("UId", "26");
                nameCon3.SetAttribute("Name", "operand");
                wire2.AppendChild(nameCon3);
                XmlElement wire3 = doc2.CreateElement("Wire");
                wire3.SetAttribute("UId", "33");
                wires.AppendChild(wire3);
                XmlElement nameCon4 = doc2.CreateElement("NameCon");
                nameCon4.SetAttribute("UId", "26");
                nameCon4.SetAttribute("Name", "out");
                wire3.AppendChild(nameCon4);
                XmlElement nameCon5 = doc2.CreateElement("NameCon");
                nameCon5.SetAttribute("UId", "27");
                nameCon5.SetAttribute("Name", "in");
                wire3.AppendChild(nameCon5);
                XmlElement wire4 = doc2.CreateElement("Wire");
                wire4.SetAttribute("UId", "34");
                wires.AppendChild(wire4);
                XmlElement identCon2 = doc2.CreateElement("IdentCon");
                identCon2.SetAttribute("UId", "22");
                wire4.AppendChild(identCon2);
                XmlElement nameCon6 = doc2.CreateElement("NameCon");
                nameCon6.SetAttribute("UId", "27");
                nameCon6.SetAttribute("Name", "operand");
                wire4.AppendChild(nameCon6);
                XmlElement wire5 = doc2.CreateElement("Wire");
                wire5.SetAttribute("UId", "35");
                wires.AppendChild(wire5);
                XmlElement identCon3 = doc2.CreateElement("IdentCon");
                identCon3.SetAttribute("UId", "23");
                wire5.AppendChild(identCon3);
                XmlElement nameCon7 = doc2.CreateElement("NameCon");
                nameCon7.SetAttribute("UId", "28");
                nameCon7.SetAttribute("Name", "operand");
                wire5.AppendChild(nameCon7);
                XmlElement wire6 = doc2.CreateElement("Wire");
                wire6.SetAttribute("UId", "36");
                wires.AppendChild(wire6);
                XmlElement nameCon8 = doc2.CreateElement("NameCon");
                nameCon8.SetAttribute("UId", "28");
                nameCon8.SetAttribute("Name", "out");
                wire6.AppendChild(nameCon8);
                XmlElement nameCon9 = doc2.CreateElement("NameCon");
                nameCon9.SetAttribute("UId", "29");
                nameCon9.SetAttribute("Name", "in");
                wire6.AppendChild(nameCon9);
                XmlElement wire7 = doc2.CreateElement("Wire");
                wire7.SetAttribute("UId", "37");
                wires.AppendChild(wire7);
                XmlElement identCon4 = doc2.CreateElement("IdentCon");
                identCon4.SetAttribute("UId", "24");
                wire7.AppendChild(identCon4);
                XmlElement nameCon10 = doc2.CreateElement("NameCon");
                nameCon10.SetAttribute("UId", "29");
                nameCon10.SetAttribute("Name", "operand");
                wire7.AppendChild(nameCon10);
                XmlElement wire8 = doc2.CreateElement("Wire");
                wire8.SetAttribute("UId", "38");
                wires.AppendChild(wire8);
                XmlElement nameCon11 = doc2.CreateElement("NameCon");
                nameCon11.SetAttribute("UId", "29");
                nameCon11.SetAttribute("Name", "out");
                wire8.AppendChild(nameCon11);
                XmlElement nameCon12 = doc2.CreateElement("NameCon");
                nameCon12.SetAttribute("UId", "30");
                nameCon12.SetAttribute("Name", "in");
                wire8.AppendChild(nameCon12);
                XmlElement wire9 = doc2.CreateElement("Wire");
                wire9.SetAttribute("UId", "39");
                wires.AppendChild(wire9);
                XmlElement identCon13 = doc2.CreateElement("IdentCon");
                identCon13.SetAttribute("UId", "25");
                wire9.AppendChild(identCon13);
                XmlElement identCon14 = doc2.CreateElement("NameCon");
                identCon14.SetAttribute("UId", "30");
                identCon14.SetAttribute("Name", "operand");
                wire9.AppendChild(identCon14);
                str += "\n" + doc2.OuterXml;
            }
            //no AL or SH NETWORK
            else
            {
                XmlElement parts = doc.CreateElement("Parts"); //PARTS
                doc.AppendChild(parts);
                XmlElement access1 = doc.CreateElement("Access");
                access1.SetAttribute("Scope", "GlobalVariable");
                access1.SetAttribute("UId", "21");
                XmlElement symbol1 = doc.CreateElement("Symbol");
                XmlElement component1 = doc.CreateElement("Component");
                component1.SetAttribute("Name", signal.tag + "_FLD");
                symbol1.AppendChild(component1);
                access1.AppendChild(symbol1);
                parts.AppendChild(access1);
                XmlElement access2 = doc.CreateElement("Access");
                access2.SetAttribute("Scope", "GlobalVariable");
                access2.SetAttribute("UId", "22");
                XmlElement symbol2 = doc.CreateElement("Symbol");
                XmlElement component2 = doc.CreateElement("Component");
                component2.SetAttribute("Name", "FALM");
                XmlElement component3 = doc.CreateElement("Component");
                component3.SetAttribute("Name", signal.tag);
                symbol2.AppendChild(component2);
                symbol2.AppendChild(component3);
                access2.AppendChild(symbol2);
                parts.AppendChild(access2);
                XmlElement part1 = doc.CreateElement("Part");
                part1.SetAttribute("Name", "Contact");
                part1.SetAttribute("UId", "23");
                XmlElement negated1 = doc.CreateElement("Negated");
                negated1.SetAttribute("Name", "operand");
                part1.AppendChild(negated1);
                parts.AppendChild(part1);
                XmlElement part2 = doc.CreateElement("Part");
                part2.SetAttribute("Name", "Coil");
                part2.SetAttribute("UId", "24");
                parts.AppendChild(part2);
                str += "\n" + doc.OuterXml;

                XmlElement wires = doc2.CreateElement("Wires"); //WIRES
                doc2.AppendChild(wires);
                XmlElement wire1 = doc2.CreateElement("Wire");
                wire1.SetAttribute("UId", "25");
                XmlElement powerrail1 = doc2.CreateElement("Powerrail");
                XmlElement namecon1 = doc2.CreateElement("NameCon");
                namecon1.SetAttribute("UId", "23");
                namecon1.SetAttribute("Name", "in");
                wire1.AppendChild(powerrail1);
                wire1.AppendChild(namecon1);
                wires.AppendChild(wire1);
                XmlElement wire2 = doc2.CreateElement("Wire");
                wire2.SetAttribute("UId", "26");
                XmlElement identcon1 = doc2.CreateElement("IdentCon");
                identcon1.SetAttribute("UId", "21");
                XmlElement namecon2 = doc2.CreateElement("NameCon");
                namecon2.SetAttribute("UId", "23");
                namecon2.SetAttribute("Name", "operand");
                wire2.AppendChild(identcon1);
                wire2.AppendChild(namecon2);
                wires.AppendChild(wire2);
                XmlElement wire3 = doc2.CreateElement("Wire");
                wire3.SetAttribute("UId", "27");
                XmlElement namecon3 = doc2.CreateElement("NameCon");
                namecon3.SetAttribute("UId", "23");
                namecon3.SetAttribute("Name", "out");
                XmlElement namecon4 = doc2.CreateElement("NameCon");
                namecon4.SetAttribute("UId", "24");
                namecon4.SetAttribute("Name", "in");
                wire3.AppendChild(namecon3);
                wire3.AppendChild(namecon4);
                wires.AppendChild(wire3);
                XmlElement wire4 = doc2.CreateElement("Wire");
                wire4.SetAttribute("UId", "28");
                XmlElement identcon2 = doc2.CreateElement("IdentCon");
                identcon2.SetAttribute("UId", "22");
                XmlElement namecon5 = doc2.CreateElement("NameCon");
                namecon5.SetAttribute("UId", "24");
                namecon5.SetAttribute("Name", "operand");
                wire4.AppendChild(identcon2);
                wire4.AppendChild(namecon5);
                wires.AppendChild(wire4);
                str += "\n" + doc2.OuterXml;
            }
            str += "\n\t\t\t</FlgNet>\r\n\t\t</NetworkSource>\r\n\t\t<ProgrammingLanguage>F_LAD</ProgrammingLanguage>\r\n\t</AttributeList>\r\n\t<ObjectList>\r\n\t\t<MultilingualText ID=\"" + "A" + ID.ToString() + "\" CompositionName=\"Comment\">\r\n\t\t\t<ObjectList>\r\n\t\t\t\t<MultilingualTextItem ID=\"" + "B" + ID.ToString() + "\" CompositionName=\"Items\">\r\n\t\t\t\t\t<AttributeList>\r\n\t\t\t\t\t\t<Culture>en-US</Culture>\r\n\t\t\t\t\t\t<Text />\r\n\t\t\t\t\t</AttributeList>\r\n\t\t\t\t</MultilingualTextItem>\r\n\t\t\t</ObjectList>\r\n\t\t</MultilingualText>\r\n\t\t<MultilingualText ID=\"" + "C" + ID.ToString() + "\" CompositionName=\"Title\">\r\n\t\t\t<ObjectList>\r\n\t\t\t\t<MultilingualTextItem ID=\"" + "D" + ID.ToString() + "\" CompositionName=\"Items\">\r\n\t\t\t\t\t<AttributeList>\r\n\t\t\t\t\t\t<Culture>en-US</Culture>\r\n\t\t\t\t\t\t<Text>" + signal.description + "</Text>\r\n\t\t\t\t\t</AttributeList>\r\n\t\t\t\t</MultilingualTextItem>\r\n\t\t\t</ObjectList>\r\n\t\t</MultilingualText>\r\n\t</ObjectList>\r\n</SW.Blocks.CompileUnit>";
            xml += "\n" + str;
        }
    }
}
